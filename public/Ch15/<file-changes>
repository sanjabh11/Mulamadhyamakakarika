// Animation loop
function animate() {
    const animationId = requestAnimationFrame(animate);
    
    // Animate atom in superposition state when box is closed
    if (catState === "superposition") {
        animationPhase += 0.01 * catAnimationSpeed;
        
        // Pulsate the radioactive atom to indicate superposition and probability of decay
        const pulseFactor = 1 + Math.sin(animationPhase * 5) * 0.2;
        atom.scale.set(pulseFactor, pulseFactor, pulseFactor);
        
        // Adjust the superposition visualization opacity to create a breathing effect
        const opacityFactor = (Math.sin(animationPhase * 2) * 0.3 + 0.7) * superpositionVisualization;
        superpositionGroup.children.forEach((child, index) => {
            if (child.material) {
                child.material.opacity = Math.max(0.05, opacityFactor - index * 0.05);
            }
        });
    }
    
    // Handle box opening animation and state transition
    if (boxState === "opening") {
        const elapsed = Date.now() - openingStartTime;
        const duration = 2000; // 2 seconds for the box to fully open
        const progress = Math.min(elapsed / duration, 1);
        
        // Use smooth easing for lid opening animation
        const openingAngle = progress * Math.PI/2; // Rotate lid up to 90 degrees
        boxLid.rotation.z = openingAngle;
        
        // Hinge mechanics for realistic lid movement
        const hinge = boxLid.userData.hinge;
        const liftAmount = Math.sin(openingAngle) * boxSize/2;
        boxLid.position.y = boxLid.userData.originalY + liftAmount * 0.5;
        boxLid.position.z = hinge.z - Math.cos(openingAngle) * boxSize/2 + boxSize/2;
        
        // Reveal cat's state gradually as box opens
        if (progress >= 0.7) {
            // Fade out the superposition visualization to reveal definite state
            const revealProgress = (progress - 0.7) / 0.3;
            superpositionGroup.children.forEach(child => {
                if (child.material) {
                    child.material.opacity = Math.max(0, 0.15 - revealProgress * 0.15);
                }
            });
            
            // Fade in the determined state of the cat (alive or dead)
            if (catState === "alive") {
                aliveCatGroup.visible = true;
                aliveCatGroup.children.forEach(child => {
                    if (child.material && child.material.opacity !== undefined) {
                        child.material.opacity = Math.min(1, revealProgress);
                    }
                });
            } else {
                deadCatGroup.visible = true;
                deadCatGroup.children.forEach(child => {
                    if (child.material && child.material.opacity !== undefined) {
                        child.material.opacity = Math.min(1, revealProgress);
                    }
                });
            }
        }
        
        // Transition to 'open' state once animation completes
        if (progress >= 1) {
            boxState = "open";
            superpositionGroup.visible = false; // Hide superposition for clarity
        }
    }
    
    // ... rest of animate function ...
}

// ... rest of initVerse10 function ...